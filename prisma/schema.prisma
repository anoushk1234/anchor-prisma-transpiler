// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CandyMachine {
  pubkey                             String           @id
  authority                          String
  wallet                             String
  tokenMint                          String?
  itemsRedeemed                      Int
  data                               CandyMachineData @relation(fields: [candyMachineDataCandyMachineDataId], references: [CandyMachineDataId])
  dataId                             String
  candyMachineDataCandyMachineDataId String
}

model CollectionPDA {
  pubkey       String @id
  mint         String
  candyMachine String
}

model CandyMachineData {
  CandyMachineDataId                           String                @id @default(uuid())
  uuid                                         String
  price                                        Int
  symbol                                       String
  sellerFeeBasisPoints                         Int
  maxSupply                                    Int
  isMutable                                    Boolean
  retainAuthority                              Boolean
  goLiveDate                                   Int?
  endSettings                                  EndSettings           @relation(fields: [endSettingsEndSettingsId], references: [EndSettingsId])
  endSettingsId                                String
  creators                                     Creator[]
  creatorsId                                   String
  hiddenSettings                               HiddenSettings        @relation(fields: [hiddenSettingsHiddenSettingsId], references: [HiddenSettingsId])
  hiddenSettingsId                             String
  whitelistMintSettings                        WhitelistMintSettings @relation(fields: [whitelistMintSettingsWhitelistMintSettingsId], references: [WhitelistMintSettingsId])
  whitelistMintSettingsId                      String
  itemsAvailable                               Int
  gatekeeper                                   GatekeeperConfig      @relation(fields: [gatekeeperConfigGatekeeperConfigId], references: [GatekeeperConfigId])
  gatekeeperId                                 String
  CandyMachine                                 CandyMachine[]
  endSettingsEndSettingsId                     String
  hiddenSettingsHiddenSettingsId               String
  whitelistMintSettingsWhitelistMintSettingsId String
  gatekeeperConfigGatekeeperConfigId           String
}

model ConfigLine {
  ConfigLineId String @id @default(uuid())
  name         String
  uri          String
}

model EndSettings {
  EndSettingsId    String             @id @default(uuid())
  endSettingType   EndSettingType
  endSettingTypeId String
  number           Int
  CandyMachineData CandyMachineData[]
}

model Creator {
  CreatorId                          String            @id @default(uuid())
  address                            String
  verified                           Boolean
  share                              Int
  CandyMachineData                   CandyMachineData? @relation(fields: [candyMachineDataCandyMachineDataId], references: [CandyMachineDataId])
  candyMachineDataCandyMachineDataId String?
}

model HiddenSettings {
  HiddenSettingsId String             @id @default(uuid())
  name             String
  uri              String
  hash             Int[]
  CandyMachineData CandyMachineData[]
}

model WhitelistMintSettings {
  WhitelistMintSettingsId String             @id @default(uuid())
  mode                    WhitelistMintMode
  modeId                  String
  mint                    String
  presale                 Boolean
  discountPrice           Int?
  CandyMachineData        CandyMachineData[]
}

model GatekeeperConfig {
  GatekeeperConfigId String             @id @default(uuid())
  gatekeeperNetwork  String
  expireOnUse        Boolean
  CandyMachineData   CandyMachineData[]
}

enum CandyError {
  IncorrectOwner
  Uninitialized
  MintMismatch
  IndexGreaterThanLength
  NumericalOverflowError
  TooManyCreators
  UuidMustBeExactly6Length
  NotEnoughTokens
  NotEnoughSOL
  TokenTransferFailed
  CandyMachineEmpty
  CandyMachineNotLive
  HiddenSettingsConfigsDoNotHaveConfigLines
  CannotChangeNumberOfLines
  DerivedKeyInvalid
  PublicKeyMismatch
  NoWhitelistToken
  TokenBurnFailed
  GatewayAppMissing
  GatewayTokenMissing
  GatewayTokenExpireTimeInvalid
  NetworkExpireFeatureMissing
  CannotFindUsableConfigLine
  InvalidString
  SuspiciousTransaction
  CannotSwitchToHiddenSettings
  IncorrectSlotHashesPubkey
  IncorrectCollectionAuthority
  MismatchedCollectionPDA
  MismatchedCollectionMint
  SlotHashesEmpty
  MetadataAccountMustBeEmpty
  MissingSetCollectionDuringMint
  NoChangingCollectionDuringMint
  CandyCollectionRequiresRetainAuthority
}

enum EndSettingType {
  Date
  Amount
}

enum WhitelistMintMode {
  BurnEveryTime
  NeverBurn
}
